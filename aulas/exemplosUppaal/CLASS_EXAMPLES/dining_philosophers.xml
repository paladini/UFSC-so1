<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
const int iterations = 2;

const int NUM_SEMAPHORES = 5;
const int NUM_PHILOSOPHERS = 5;
const int N = NUM_PHILOSOPHERS;  // Semaphore requires a constant named "N"

chan semWait[NUM_SEMAPHORES][NUM_PHILOSOPHERS];
chan semSignal[NUM_SEMAPHORES][NUM_PHILOSOPHERS];
chan semGo[NUM_SEMAPHORES][NUM_PHILOSOPHERS];</declaration><template><name x="5" y="5">Philosopher</name><parameter>const int[0,NUM_PHILOSOPHERS-1] n</parameter><declaration>// Place local declarations here.
int[0,iterations] i = 0;
int[0,N-1] first = 0;
int[0,N-1] second = 0;

void prepare_to_get_chopsticks()
{
	first = (n &lt; 4)? n : 0;
	second = (n &lt; 4)? n + 1 : 4;
}</declaration><location id="id0" x="-256" y="-168"></location><location id="id1" x="-344" y="40"></location><location id="id2" x="-344" y="-40"><name x="-408" y="-48">eating</name></location><location id="id3" x="-256" y="-80"></location><location id="id4" x="-344" y="-128"></location><location id="id5" x="-344" y="-208"></location><location id="id6" x="-512" y="-312"><name x="-576" y="-320">done</name></location><location id="id7" x="-344" y="-312"><name x="-368" y="-360">thinking</name></location><init ref="id7"/><transition><source ref="id6"/><target ref="id6"/><nail x="-472" y="-272"/><nail x="-536" y="-264"/></transition><transition><source ref="id1"/><target ref="id7"/><label kind="synchronisation" x="-608" y="48">semSignal[second][n]!</label><label kind="assignment" x="-520" y="16">i := i + 1</label><nail x="-344" y="88"/><nail x="-448" y="88"/><nail x="-440" y="-240"/></transition><transition><source ref="id0"/><target ref="id4"/><label kind="synchronisation" x="-304" y="-144">semGo[first][n]?</label></transition><transition><source ref="id5"/><target ref="id0"/><label kind="synchronisation" x="-312" y="-208">semWait[first][n]!</label></transition><transition><source ref="id7"/><target ref="id5"/><label kind="guard" x="-336" y="-272">i &lt; iterations</label><label kind="assignment" x="-336" y="-296">prepare_to_get_chopsticks()</label></transition><transition><source ref="id2"/><target ref="id1"/><label kind="synchronisation" x="-336" y="-8">semSignal[first][n]!</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="synchronisation" x="-304" y="-56">semGo[second][n]?</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="-296" y="-112">semWait[second][n]!</label></transition><transition><source ref="id7"/><target ref="id6"/><label kind="guard" x="-480" y="-336">i &gt;= iterations</label></transition></template><template><name>Semaphore</name><parameter>const int id,  const int queue_size, const int init_val</parameter><declaration>//The value of the semaphore
int count = init_val;
//The queue of the semaphore
//value -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
meta int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}</declaration><location id="id8" x="384" y="64"><committed/></location><location id="id9" x="608" y="320"><committed/></location><location id="id10" x="352" y="96"><name x="288" y="64">overflow</name></location><location id="id11" x="480" y="192"></location><init ref="id8"/><transition><source ref="id8"/><target ref="id11"/><label kind="assignment" x="408" y="72">initialize()</label></transition><transition><source ref="id11"/><target ref="id11"/><label kind="select" x="272" y="192">p:int[0,N-1]</label><label kind="guard" x="272" y="208">count&gt;=0</label><label kind="synchronisation" x="272" y="224">semSignal[id][p]?</label><label kind="assignment" x="272" y="240">count++</label><nail x="352" y="192"/><nail x="352" y="224"/></transition><transition><source ref="id11"/><target ref="id9"/><label kind="select" x="552" y="104">p:int[0,N-1]</label><label kind="guard" x="552" y="120">count&gt;0</label><label kind="synchronisation" x="552" y="136">semWait[id][p]?</label><label kind="assignment" x="552" y="152">count--,
q=p</label><nail x="608" y="192"/></transition><transition><source ref="id11"/><target ref="id10"/><label kind="select" x="248" y="112">p:int[0,N-1]</label><label kind="guard" x="248" y="128">count&lt;=0 &amp;&amp; fullQueue()</label><label kind="synchronisation" x="248" y="144">semWait[id][p]?</label></transition><transition><source ref="id9"/><target ref="id11"/><label kind="synchronisation" x="512" y="208">semGo[id][q]!</label></transition><transition><source ref="id11"/><target ref="id9"/><label kind="select" x="360" y="280">p:int[0,N-1]</label><label kind="guard" x="360" y="296">count&lt;0</label><label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label><label kind="assignment" x="360" y="328">count++,
q=headQueue(),
deQueue()</label><nail x="480" y="320"/></transition><transition><source ref="id11"/><target ref="id11"/><label kind="select" x="480" y="-24">p:int[0,N-1]</label><label kind="guard" x="480" y="-8">count&lt;=0 &amp;&amp; not fullQueue()</label><label kind="synchronisation" x="480" y="8">semWait[id][p]?</label><label kind="assignment" x="480" y="24">count--,
enQueue(p)</label><nail x="480" y="64"/><nail x="512" y="64"/></transition></template><system>// Place template instantiations here.

// Semaphore(const int id,  const int queue_size, const int init_val)
chopstick0 = Semaphore(0,2,1); // At most two philosophers can compete by the same chopstick, so the queue_size is 2.
chopstick1 = Semaphore(1,2,1);
chopstick2 = Semaphore(2,2,1);
chopstick3 = Semaphore(3,2,1);
chopstick4 = Semaphore(4,2,1);

phil0 = Philosopher(0);
phil1 = Philosopher(1);
phil2 = Philosopher(2);
phil3 = Philosopher(3);
phil4 = Philosopher(4);

// List one or more processes to be composed into a system.
system chopstick0, chopstick1, chopstick2, chopstick3, chopstick4, phil0, phil1, phil2, phil3, phil4;</system></nta>