<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
const int iterations = 10;
const int maxThreads = 4;

chan CanI[maxThreads], IWant[maxThreads], ILeft[maxThreads];

</declaration><template><name x="5" y="5">SimpleThread</name><parameter>const int[0,9] threadNum</parameter><declaration>// Place local declarations here.
int[0, iterations] i = 0;</declaration><location id="id0" x="80" y="8"><name x="96" y="0">waiting</name></location><location id="id1" x="-160" y="-112"><name x="-170" y="-142">done</name></location><location id="id2" x="16" y="128"><name x="32" y="120">doSomething2</name></location><location id="id3" x="16" y="56"><name x="32" y="48">criticalRegion</name></location><location id="id4" x="16" y="-48"><name x="32" y="-56">doSomething1</name></location><location id="id5" x="16" y="-112"><name x="32" y="-120">checkLoop</name></location><location id="id6" x="16" y="-160"><name x="6" y="-190">Start</name></location><init ref="id6"/><transition><source ref="id0"/><target ref="id3"/><label kind="synchronisation" x="64" y="24">CanI[threadNum]?</label></transition><transition><source ref="id4"/><target ref="id0"/><label kind="synchronisation" x="64" y="-32">IWant[threadNum]!</label></transition><transition><source ref="id1"/><target ref="id1"/><nail x="-208" y="-104"/><nail x="-184" y="-80"/></transition><transition><source ref="id5"/><target ref="id1"/><label kind="guard" x="-120" y="-136">i &gt;= iterations</label></transition><transition><source ref="id2"/><target ref="id5"/><label kind="assignment" x="-44" y="-16">i++</label><nail x="-24" y="48"/><nail x="-24" y="-72"/></transition><transition><source ref="id3"/><target ref="id2"/><label kind="synchronisation" x="24" y="72">ILeft[threadNum]!</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="24" y="-80">i &lt; iterations</label></transition><transition><source ref="id6"/><target ref="id5"/></transition></template><template><name>Controller</name><declaration>meta int[0, maxThreads] owner;</declaration><location id="id7" x="0" y="168"><name x="16" y="160">busyCR</name></location><location id="id8" x="0" y="80"><name x="16" y="72">Temp</name></location><location id="id9" x="0" y="0"><name x="-10" y="-30">FreeCR</name></location><init ref="id9"/><transition><source ref="id7"/><target ref="id9"/><label kind="synchronisation" x="-152" y="64">ILeft[owner]?</label><nail x="-56" y="72"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="8" y="112">CanI[owner]!</label></transition><transition><source ref="id9"/><target ref="id8"/><label kind="select" x="8" y="8">id:int[0,maxThreads - 1]</label><label kind="synchronisation" x="8" y="24">IWant[id]?</label><label kind="assignment" x="8" y="40">owner := id</label></transition></template><system>// Place template instantiations here.
Process0 = SimpleThread(0);
Process1 = SimpleThread(1);
Process2 = SimpleThread(2);
Process3 = SimpleThread(3);

Controller0 = Controller();

// List one or more processes to be composed into a system.
system Process0, Process1, Process2, Process3, Controller0;</system></nta>